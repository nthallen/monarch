/* extmain.skel include file for extraction
 * 2019/04/08: Copied from QNX6 version
 * Revision 1.1  2008/07/03 15:11:07  ntallen
 * Copied from QNX4 version V1R9
 */
/* Skeleton headers section */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <math.h>
#include <stdint.h>
#include "nl.h"
#include "dtoe.h"
#include "oui.h"
#include "dasio/tm_client.h"
#include "dasio/loop.h"
#include "dasio/quit.h"

using namespace DAS_IO;

%headers%

/* Skeleton console_functions section */
#ifdef TABLELIB_H
  #define phdisplay(x,y) tbl_dispfield(x,y)
#endif
%console_functions%

/* Skeleton data_defs section */
#ifndef EXTRACTION_INIT
  #define EXTRACTION_INIT
#endif
#ifndef EXTRACTION_TERM
  #define EXTRACTION_TERM
#endif
#ifndef EXTRACTION_ROW
  #define EXTRACTION_ROW
#endif
%data_defs%

/* Skeleton main_program section */
#ifdef TABLELIB_H
  #include "DCph.h"
  #ifndef TM_CLIENT_CLASS
    #define TM_CLIENT_CLASS ph_tm_client
  #endif
#else
  #ifdef NCTABLE_H_INCLUDED
    #include "dasio/nc_tm_client.h"
    #ifndef TM_CLIENT_CLASS
      #define TM_CLIENT_CLASS nc_tm_client
    #endif
    #ifndef TM_CLIENT_FAST
      #define TM_CLIENT_FAST true
    #endif
    #ifndef EXTRACTION_UPDATE
      #define EXTRACTION_UPDATE nct_refresh()
    #endif
  #else
    #ifndef TM_CLIENT_FAST
      #ifdef TMC_SERVER_CLASS
        #define TM_CLIENT_FAST true
      #else
        #define TM_CLIENT_FAST false
      #endif
    #endif
    #ifndef TM_CLIENT_CLASS
      #define TM_CLIENT_CLASS ext_tm_client
    #endif
  #endif
#endif
typedef TM_CLIENT_CLASS TM_CLIENT;
#ifndef EXTRACTION_UPDATE
  #define EXTRACTION_UPDATE
#endif

bool tm_client::opt_Q = false;

#ifdef TMC_SERVER_CLASS

/* The TMC_SERVER_CLASS must have a DAS_IO::Loop ELoop member.
 * Its constructor is responsible for setting up and
 * connecting a listening Socket. It is not required to be
 * a subclass of DAS_IO::Server, since those are limited to
 * clients built with dasio. json_server is the prime example
 * of a server that needs to support simpler clients.
 */
int main(int argc, char **argv) {
  oui_init_options(argc, argv);
  msg( 0, "Startup" );
  TMC_SERVER_CLASS *srvr = new TMC_SERVER_CLASS(TMC_SERVER_HOSTNAME);
  TM_CLIENT *Ext = new TM_CLIENT(4096, TM_CLIENT_FAST);
  srvr->ELoop.add_child(Ext);
  Ext->connect();
  if (tm_client::opt_Q) {
    Quit *Q = new Quit(0, 0, "Qsrvr");
    srvr->ELoop.add_child(Q);
    Q->connect();
  }
  EXTRACTION_INIT;
  tminitfunc();
  EXTRACTION_UPDATE;
  srvr->ELoop.event_loop();
  msg(MSG_DEBUG, "Out of loop");
  EXTRACTION_TERM;
  srvr->ELoop.delete_children();
  srvr->ELoop.clear_delete_queue();
  msg( 0, "Shutdown" );
  return 0;
}

#else

int main(int argc, char **argv) {
  oui_init_options(argc, argv);
  msg( 0, "Startup" );
  TM_CLIENT *Ext = new TM_CLIENT(4096, TM_CLIENT_FAST);
  Loop ELoop;
  ELoop.add_child(Ext);
  Ext->connect();
  if (tm_client::opt_Q) {
    Quit *Q = new Quit(0, false, "Qsrvr");
    ELoop.add_child(Q);
    Q->connect();
  }
  EXTRACTION_INIT;
  tminitfunc();
  EXTRACTION_UPDATE;
  ELoop.event_loop();
  EXTRACTION_TERM;
  ELoop.delete_children();
  ELoop.clear_delete_queue();
  msg( 0, "Shutdown" );
  return 0;
}

#endif

#ifdef NCTABLE_H_INCLUDED
bool DAS_IO::nc_tm_client::serialized_signal_handler(uint32_t signals_seen) {
  msg(MSG_DEBUG, "received signals: %08X", signals_seen);
  tmredrawfunc();
  return false;
}
#endif

%main_program%

/* Skeleton rest of the file */

#define incmod(x,y) if (x==((y)-1)) x = 0; else x++

#if (NROWMINF == 1)
  #define MINF_ROW 0
  #define MINF_ROW_ZERO
  #define MINF_ROW_INC
#else
  #define MINF_ROW tm_client::minf_row
  #define MINF_ROW_ZERO tm_client::minf_row = 0
  #define MINF_ROW_INC ++tm_client::minf_row
#endif

#define incmod(x,y) if (x==((y)-1)) x = 0; else x++

#if TM_DATA_TYPE == TMTYPE_DATA_T3
unsigned int TM_CLIENT::process_data() {
  unsigned char *raw;
  int n_rows = rows_in_buf;
  MFCtr = buf_mfctr;
  #ifdef IVFUNCS
    uint16_t delta = MFCtr - next_minor_frame;
    if (delta != 0) {
        // Because we are TMTYPE_DATA_T3, we know NROWMINF == 1
        if (delta > NROWMAJF) delta = NROWMAJF;
        while (delta-- > 0) {
          ivfuncs[majf_row]();
          incmod(majf_row, NROWMAJF);
        }
    }
  #endif
  majf_row = (((uint16_t)MFCtr) % NROWMAJF);

  for ( raw = data_row; n_rows > 0; --n_rows, raw += nbQrow ) {
    home = (union home_row *) raw;
    EXTRACTION_ROW
    efuncs[majf_row]();
    incmod(majf_row, NROWMAJF);
    ++MFCtr;
  }
  next_minor_frame = MFCtr;
  EXTRACTION_UPDATE;
  return rows_in_buf;
}
#else
  #error Data types TMTYPE_DATA_T1 and TMTYPE_DATA_T2 not implemented in extmain.skel
#endif

#ifdef NEED_TIME_FUNCS
  #define ROWS(x) (((unsigned long)(x))*NROWMINF+MINF_ROW)
  #define FRACSECS(x) (((unsigned long)ROWS(x))*NSECSPER)

  long itime(void) {
      return(tm_info.t_stmp.secs +
        FRACSECS(MFCtr-tm_info.t_stmp.mfc_num) / NROWSPER );
  }
  double dtime(void) {
      return(tm_info.t_stmp.secs +
        (double) FRACSECS(MFCtr-tm_info.t_stmp.mfc_num) / NROWSPER );
  }
  double etime(void) {
    double t;
    static double t0 = -1e9;
    
    t = dtime();
    if (t0 == -1e9) t0 = t;
    return(t - t0);
  }
#endif

/* Skeleton End of File */
