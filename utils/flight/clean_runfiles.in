#! @SHELL_EXE@

function print_usage {
cat << EOF
clean_runfiles [-h] [-k] [-r]

Examines the run directory /var/run/monarch and
removes any inactive elements. This includes:

  - orphaned sockets (process no longer exists)
  - old TM client PID files under /var/run/monarch/run
  - empty Experiment directories and lock files

These operations should be safe to execute at any
time.

Options:
  -h Print this message
  -k If the Experiment environment variable is defined
     and a PID file associated with an active process
     is found, kill it. This is decidedly not safe to
     run indescrimanently, since it will unceremoniously
     shut down the experiment. In particular, it cannot
     be run at the beginning of a doit script, since
     a common use case is to run doit after the instrument
     is operational. On the other hand, it is probably
     appropriate at the beginning of an extract script,
     since it then pertains to just the extraction Experiment
     value.
  -r Use .r suffix to Experiment to cleanup extractions
EOF
exit 0
}

opt_kill=no
opt_rdr=no

while getopts "hkr" option; do
  case $option in
    h) print_usage;;
    k) opt_kill=yes;;
    r) opt_rdr=yes;;
    \?) echo; exit 1;;
    *) echo Unsupported option: -$option; exit 1;;
  esac
done

# Remove any abandoned sockets
for socket in `find /var/run/monarch -type s`; do
  if [ -f ${socket}.pid ]; then
    pid=`cat ${socket}.pid`
    if ! kill -0 $pid 2>/dev/null; then
      echo socket $socket is abandoned
      rm -f $socket
      rm -f ${socket}.pid
    else
      echo socket $socket is still active at PID $pid
    fi
  fi
done

# Remove any dead pid files under run
if [ -d /var/run/monarch/run ]; then
  for pidfile in `find /var/run/monarch/run -type f`; do
    pid=${pidfile##*/}
    if kill -0 $pid 2>/dev/null; then
      echo "TM client $pidfile is still active"
    else
      echo "TM client $pidfile is gone"
      rm -f $pidfile
    fi
  done

  for piddir in `find /var/run/monarch/run -mindepth 1 -type d`; do
    rmdir --ignore $piddir
    if [ -d $piddir ]; then
      echo "PID directory $piddir is non-empty"
    else
      echo "Removed PID directory $piddir"
    fi
  done
fi

# Remove any empty Experiment directories
for lockfile in `find /var/run/monarch -name "*.lock"`; do
  dir=${lockfile%.lock}
  [ -d $dir ] &&
    flock --nb $lockfile rmdir --ignore $dir
  if [ -d $dir ]; then
    echo Experiment directory $dir is non-empty
  else
    rm -f $lockfile
    echo "Experiment directory $dir removed"
  fi
done


[ $opt_kill = yes ] || exit 0
. /usr/local/libexec/load_exconfig.sh
[ -n "$CFG_ERROR" ] && exit 0
[ $opt_rdr = yes ] && Experiment=$Experiment.r

rv=0
if [ -d "/var/run/monarch/$Experiment" ]; then
  for pidfile in `find /var/run/monarch/$Experiment -name "*.pid"`; do
    pid=`cat $pidfile`
    for signal in KILL; do
      if kill -$signal $pid 2>/dev/null; then
        echo "Delivered SIG$signal to ${pidfile%.pid} PID $pid"
        sleep 1
        if kill -0 $pid 2>/dev/null; then
          echo "${pidfile%.pid} PID $pid still active"
        else
          rm -f $pidfile ${pidfile%.pid}
          echo "${pidfile%.pid} PID $pid successfully terminated"
          break
        fi
      else
        echo "kill SIG$signal returned error for ${pidfile%.pid} PID $pid"
      fi
    done
    [ -f $pidfile ] && rv=1
  done
fi

if [ -d "/var/run/monarch/run/$Experiment" ]; then
  for pidfile in `find /var/run/monarch/run/$Experiment -type f`; do
    pid=${pidfile##*/}
    for signal in INT KILL; do
      if kill -$signal $pid 2>/dev/null; then
        echo "Delivered SIG$signal to TM Client PID $pid"
        sleep 1
        if kill -0 $pid 2>/dev/null; then
          echo "TM Client PID $pid still active"
        else
          rm -f $pidfile
          echo "TM Client PID $pid successfully terminated with SIG$signal"
          break
        fi
      else
        echo "kill SIG$signal returned error for TM Client PID $pid"
      fi
    done
    [ -f $pidfile ] && rv=1
  done
  rmdir --ignore /var/run/monarch/run/$Experiment
fi

exit $rv
