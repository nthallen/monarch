#! @SHELL_EXE@
# Flight instrument script
# The operation of this script is determined by the
# contents of Experiment.config. In most configurations
# this script is executed automatically as user flight
# in the flight user's home directory. The significance
# of the various shell variables is documented here:
# https://www.arp.harvard.edu/eng/das/manuals/exconfig.html#FlightNode
# Specifically:
#   note that FlightNode is defined if and only if we are
#   running in a flight configuration, which means this
#   script is automatically restarted whenever it terminates.
#   Under QNX6, this is handled by tinit as configured in
#   /etc/config/ttys. Under Linux, this is handled by
#   systemd using /lib/systemd/system/monarch.service
export PATH=:/bin:/usr/bin:/usr/local/bin
umask g+w

if [ "x$1" != "xteed" ]; then
  touch flight.sh.log
  if [ -w flight.sh.log ]; then
    exec 5>&1
    $0 teed $* 4>&5 2>&1 | tee -a flight.sh.log
    exit 0
  fi
  msg -Vn flight.sh "Cannot write to flight.sh.log"
  exec 4>&1
else
  shift # may not be relevant after removing adhoc arg
fi

# flight.sh for now should never run as a SESSION but should be
# global. Interactive doit scripts do define SESSION before
# launching screen and hence before launching flight.sh, so
# we need to clear it here.
SESSION=

echo
msg -Vn flight.sh "Running flight.sh: `date`"

. /usr/local/libexec/load_exconfig.sh
msgProgram=flight.sh
if [ -n "$CFG_ERROR" ]; then
  msgf 2 "$CFG_ERROR: stopping"
  exec 1>&4 2>&4 # close pipe to flight.sh.log and reopen stdout/err
  exec parent -V -T "Missing $cfile"
fi

launch_error=""
parent_srvr='-s Unix'
[ -n "$FlightNode" ] && parent_srvr='-s both'
parent_loop=''
script=''
have_tm_bfr=''
have_tm_gen=''
have_cmd=''
status_string=''

[ -n "$LOOP_STOP_FILE" ] || LOOP_STOP_FILE=loopstop.txt
[ -n "$LOOP_START_FILE" ] || LOOP_START_FILE=loopstart.txt
[ -n "$LOOP_SCRIPT_FILE" ] || LOOP_SCRIPT_FILE=loopscript.txt
if [ -n "$LOOP_ON_FILE" -a -e "$LOOP_ON_FILE" ]; then
  msgf 0 "Invoking reduce for LOOP_ON_FILE"
  [ -z "$REDUCE_LOG_FILE" ] && REDUCE_LOG_FILE=reducelog.txt
  exec 1>&4 2>&4 # close pipe to flight.sh.log and reopen stdout/err
  BEDTIME=yes reduce 2>&1 | tee -a $REDUCE_LOG_FILE
  if [ -e "$LOOP_ON_FILE" ]; then
    msgf -V 2 "reduce did not clear LOOP_ON_FILE '$LOOP_ON_FILE'" 2>&1 |
      tee -a $REDUCE_LOG_FILE
    rm -f $LOOP_STOP_FILE $LOOP_START_FILE
    exec parent $parent_srvr -V -T "reduce error"
  fi
  [ -f $LOOP_SCRIPT_FILE ] && mv $LOOP_SCRIPT_FILE $LOOP_START_FILE
  exit 0 # exit to reestablish tee log
elif [ -e "$LOOP_STOP_FILE" ]; then
  if [ -n "$RESTART_FILE" -a -e "$RESTART_FILE" -a -f "$LOOP_SCRIPT_FILE" ]; then
    msgf 0 "Restarting"
    rm -f "$RESTART_FILE"
    script=`cat $LOOP_SCRIPT_FILE`
  else
    msgf 0 "Looping terminated"
    rm -f $LOOP_STOP_FILE $LOOP_START_FILE $LOOP_SCRIPT_FILE
    script=/dev/null
  fi
elif [ -e "$LOOP_START_FILE" ]; then
  script=`cat $LOOP_START_FILE`
  rm -f $LOOP_START_FILE
fi

SUBBUS_PID=''
subbus_name=/var/run/monarch/$Experiment/subbus
if [ -n "$SUBBUSD" -a ! -e $subbus_name ]; then
  if [ -n "$SUBBUSD_DELAY" ]; then
    msgf 0 "sleep $SUBBUSD_DELAY for subbus"
    sleep $SUBBUSD_DELAY
  fi
  Launch $subbus_name subbusd_$SUBBUSD -V
  [ -z "$launch_error" ] && SUBBUS_PID=$Launch_pid
fi

if [ -z "$script" -a -n "$EXP_NODES" ]; then
  [ -z "$NETWORK_DELAY" ] && NETWORK_DELAY=3
  if [ $NETWORK_DELAY -gt 0 ]; then
    msgf 0 "sleep $NETWORK_DELAY to acquire network connections"
    sleep $NETWORK_DELAY
  fi
  for node in $EXP_NODES; do
    script=`monarchctl -G $node -V`
    [ -n "$script" ] && break
  done
  [ -n "$script" ] &&
    msgf 0 "Script name '$script' received via monarchctl"
fi

if [ -z "$script" ]; then
  if [ -n "$PICKFILE" ]; then
    script=`$PICKFILE`
  else
    script=${RUNFILE:-runfile.dflt}
  fi
fi

status_prefix=''
status_suffix=''
status_string="script $script"
[ ${script#/} = "$script" ] && script=$TMBINDIR/$script
msgf 0 "`id`"
msgf 0 "Experiment=$Experiment script=$script"
if [ -r $script ]; then
  msgProgram=${script##*/}
  . $script
  msgProgram=flight.sh
else
  msgf 0 "Specified script $script not found"
  status_suffix=" not found"
fi
[ -n "$have_tm_bfr" -a -n "$have_tm_gen" -a -n "$have_cmd" ] &&
  status_prefix='Ready: '
if [ -z "$status_suffix" ]; then
  if [ -n "$launch_err" ]; then
    status_suffix=" started: $launch_err"
  else
    status_suffix=" completed"
  fi
fi
status_string="$status_prefix$status_string$status_suffix"

if [ -n "$SUBBUS_PID" ]; then
  pids=`jobs -p | grep -v $SUBBUS_PID`
else
  pids=`jobs -p`
fi

if [ -n "$launch_error" -o -n "$pids" ]; then
  msgf -V 0 "SERVICE='$SERVICE'"
  [ $SERVICE = Installed ] && echo $script >$LOOP_SCRIPT_FILE
  lsf_exists=no
  [ -e "$LOOP_STOP_FILE" ] && lsf_exists=yes
  msgf -V 0 "LOOP_STOP_FILE=$LOOP_STOP_FILE exists:$lsf_exists"
  [ -z "$parent_loop" ] && parent_loop="-q -F $LOOP_STOP_FILE"
  msgf -V 0 "exec parent $parent_srvr $parent_loop -V -T '$status_string'"
else
  parent_loop="-f $LOOP_START_FILE"
  [ -n "$SUBBUS_PID" ] && kill -SIGHUP $SUBBUS_PID
  msgf -V 0 "No subprocesses, closing flight.sh.log"
  msgf -V 0 "exec parent $parent_srvr $parent_loop -V -T '$status_string'"
  exec 1>&4 2>&4
fi

exec parent $parent_srvr $parent_loop -V -T "$status_string"
