#! @SHELL_EXE@

function print_usage {
cat <<EOF
 reduce [-xav]
   Run "saverun fix" to determine the data directory
 reduce [-xav] directory
   Operate on the specified directory
 reduce -h
   Print this message
 
   -x  Don't run extractions or analysis
   -a  Don't run analysis
   -A  Run analysis even if -x is specified
   -v  Increase verbosity
 
  Reduce performs a series of operations following a data run.
  If the data directory is not specified, reduce invokes saverun
  to create a new data directory.
 
  After the data directory is created and/or located, reduce will
  copy the data directory from the flight node to the GSE node.
  This copy step will be skipped if the flight node and the GSE
  node are the same or if the variable CopyData is set to "no"
  in Experiment.config. Also, if the target directory is specified
  using a relative path and it already exists relative to the
  current directory, no copying will take place. If the
  path exists relative to the flight directory, it may be copied
  to the GSE node, following the same rules as for newly created
  data directories.
 
  Next, if any extractions are defined (and -x is not specified),
  they will be executed, and any spreadsheets created will be moved
  into the corresponding analysis subdirectory (anal/$dir, where $dir
  is the name of the new data directory). Extractions are defined via
  the "Extractions" variable in Experiment.config.
 
  Finally, if an analysis script is defined via the "Analysis"
  variable in Experiment.config and -x or -a has not been
  selected, the analysis will be run.
EOF
exit 0
}

opt_exts=yes
opt_anal=yes
opt_anal_force=no
CopyData=yes
FixDisk=no
Dircksum=no
dbg_level=-1

function do_tar {
  # do_tar $SrcRel $DestRel $LocalRel
  SrcRel=$1
  DestRel=$2
  LocalRel=$3
  
  msgf -2 "do_tar: $SSH_TAR_CMD tar -cf- -C $SrcRel $DestRel |"
  msgf -2 "  tar -xzf- -C $LocalRel"
  eval time $SSH_TAR_CMD tar -czf- -C $SrcRel $DestRel | tar -xzf- -C $LocalRel
}

#----------------------------------------------------------------
# Process command line options (-x, -a)
#----------------------------------------------------------------
while getopts "aAhxv" option; do
  case $option in
  A) opt_anal_force=yes;;
  a) opt_anal=no;;
  h) print_usage;;
  x) opt_exts=no;;
  v) let dbg_level=dbg_level-1;;
  \?) echo; exit 1;;
  *) msg -V -n $msgProgram "[ERROR] Unsupported option: -$option"; exit 1;;
  esac
done
let sval=$OPTIND-1
shift $sval

#----------------------------------------------------------------
# Load the configuration file
#----------------------------------------------------------------
. /usr/local/libexec/load_exconfig.sh
msgProgram='reduce'
msgDebug=$dbg_level
[ -n "$CFG_ERROR" ] && msgf 3 "$CFG_ERROR"

if [ -n "$1" ]; then
  directory=`locate_rundir $1`
  [ -z "$directory" -a $FltNode_Access = Remote ] &&
    directory=`$SSH_CMD "cd $HomeDir && locate_rundir $1" | tr -d '\r\n'`
  [ -n "$directory" ] || msgf 3 "Unable to locate run $1"
else
  msgf 0 "Saving Run ..."
  saverun saverun_output.txt
  msgf 0 "Run Save Complete"
  [ -e saverun_output.txt ] || exit 0
  directory=`cat saverun_output.txt|tr -d '\r\n'`
  [ -n "$directory" ] || msgf 3 "saverun output empty"
  rm saverun_output.txt
fi
case $directory in
  *:*) ;;
  *) msgf 4 "directory '$directory' should have had a colon";;
esac
srcHomeDir=${directory%:*}
directory=${directory#*:}

# saverun returns an absolute pathname with $HomeDir
# separated from the relative run path by a colon. This should
# support the case where the HomeDir on the GSE is different
# from that on the flight computer. If FltNode_Access is
# remote, we will want to copy the remote directory to
# the local path relative to the current directory.
if [ ! -d $srcHomeDir/$directory ]; then
  # The source must come from a remote system
  [ -d $directory -o $FltNode_Access = Local ] &&
    msgf 4 "Was not expecting $directory to be local"
    
  ### Working here:
  ###   srcHomeDir is defined (but could be empty if path is absolute)
  ###   directory is defined (and could be relative to /)
  ### Hence the source directory on the remote system is
  ### $srcHomeDir/$directory, and we will copy it to $directory
  ### relative to the current directory.

  #----------------------------------------------------------------
  # If we ran saverun, the directory name is relative to the
  # flight directory. If it was specified on the command line,
  # it may be relative to the GSE directory, relative to the
  # flight directory, or absolute (beginning with /) In any
  # case, if it is absolute or exists relative to the GSE
  # directory, no copying is indicated.
  #----------------------------------------------------------------
  # case "$directory" in
  #   \/*)
  #     # absolute address
  #     msgf -2 "absolute address for '$directory'";;
  #     # CopyData=no;;
  #   *)
  #     # relative address
  #     msgf -2 "relative address for '$directory'"
  #     if [ -d "$directory" ]; then
  #       msgf -2 "CopyData is a no"
  #       CopyData=no
  #     elif [ -z "$fltdir" ]; then
  #       pdirs="."
  #       [ -n "$FlightNode" ] && pdirs="$pdirs /net/$FlightNode$HomeDir"
  #       [ -n "$AltDir" ] && pdirs="$pdirs $AltDir"
  #       for pdir in $pdirs; do
  #         for ppdir in . raw/data raw/flight raw/preflt raw/cal raw/junk; do
  #           if [ -d $pdir/$ppdir/$directory ]; then
  #             fltdir=$pdir
  #             [ $pdir = . ] && CopyData=no
  #             [ $ppdir = . ] || directory=$ppdir/$directory
  #             break
  #           fi
  #         done
  #         [ -n "$fltdir" ] && break
  #       done

  #       # [ -n "$FlightNode" ] && fltdir=/net/$FlightNode$HomeDir
  #       # [ -z "$fltdir" -o ! -d "$fltdir/$directory" ] && fltdir=$AltDir

  #       [ -z "$fltdir" ] &&
  #           msgf 0 "Unable to locate data directory $directory"
  #       [ "$CopyData" != "yes" -a $fltdir != . ] &&
  #       directory=$fltdir/$directory
  #     fi;;
  # esac

  # Copy_Data srcdir destdir
  # Copies srcdir to destdir if CopySpace condition holds
  # returns true on success, false otherwise.
  function Copy_Data {
    msgf -2 "Copy_Data: ['$1'] ['$2']"

    # CopySpace defines the minimum number of kb that should be
    # left over after the copy.

    DoCopy=$CopyData
    SrcHome=$1
    SrcRel=$2
    SrcFull=$SrcHome/$SrcRel
    DestDir=$2
    # typeset DestParent destspace hasmtpt srcmnt srcnode
    if [ "$DoCopy" = "yes" -a -n "$CopySpace" ]; then
      DestParent=`dirname $DestDir`
      [ -d $DestParent ] || mkdir -p $DestParent ||
        msgf 0 "Unable to create directory '$DestParent'"
      # pick 4th element of df output (free kb)
      set X `df $DestParent`
      let destspace=$5-$CopySpace
      if [ $destspace -ge 0 ]; then
        set X `$SSH_CMD du -sk $SrcHome`
        let destspace=destspace-$2
      fi
      if [ $destspace -lt 0 ]; then
        msgf 0 "Insufficient space, data will not be copied"
        DoCopy=no
      fi
    fi

    if [ "$DoCopy" = "yes" ]; then
      msgf 0 "Copying from $SrcHome to $DestDir ..."
      do_tar $SrcHome $SrcRel .
      return 0
    fi
    return 1
  }

  if [ "$CopyData" = "yes" ]; then
    msgf -2 "Copying data from '$FlightNode:$srcHomeDir/$directory' to './$directory'"
    Copy_Data $srcHomeDir $directory
  fi

  if [ -n "$CopyHook" ]; then
    eval $CopyHook
  fi

fi

# If we get this far, the raw data should be in $directory
[ -d $directory ] || msgf 0 "Cannot proceed without local data"

#----------------------------------------------------------------
# Do Extractions if defined and not disabled
#----------------------------------------------------------------
if [ "$opt_exts" = "no" ]; then
  msgf 0 "Extractions Disabled"
  opt_anal=no
elif [ -z "$Extractions" ]; then
  msgf 0 "No Extractions Defined"
else
  msgf 0 "Extraction Proceeding ..."
  export Extractions ExtProducts RDR_OPTS
  extract $directory || msgf 0 "Extraction Apparently Failed"
fi

#----------------------------------------------------------------
# Analysis
#  Execute $Analysis if defined and not disabled
#  Analysis must be an executable (or executable script)
#  including any required options.
#
#  Analysis may refer to shell variables $directory and/or
#  $analdir as follows:
#    Analysis='anal/script -s $directory $analdir'
#  (Note the single quotes!)
#
#  In the usual case, analdir will simply be anal/950401.1.
#  The Analysis
#  will be run from the GSE directory, but the extracted
#  spreadsheets upon which Analysis will work are probably
#  located in $analdir, and the script and/or
#  program should cd there before beginning work. If the
#  extractions produce something other than spreadsheets,
#  those files should have been moved into this directory
#  by suitable definitions of ExtProducts.
#
#  It is my practice to store Analysis scripts in the anal
#  subdirectory, so a natural definition might be:
#   Analysis=anal/script
#     or
#   Analysis='anal/script -f opt $analdir'
#----------------------------------------------------------------

if [ -z "$Analysis" ]; then
  msgf 0 "No Analysis Defined"
elif [ "$opt_anal" = "no" -a $opt_anal_force = "no" ]; then
  msgf 0 "Analysis Disabled"
else
  analdir=anal/`basename $directory`
  eval msgf 0 "\"reduce: Beginning Analysis: $Analysis\""
  eval $Analysis
  msgf 0 "Analysis Completed"
fi
