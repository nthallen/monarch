#! @SHELL_EXE@

function print_usage {
cat <<EOF
locate_rundir -h
  Print this message
locate_rundir [-a] [-H HomeDir ] <run>
locate_rundir [-a] [-H HomeDir ] -l [ -N n ]
  Outputs the full path to the specified run.
  The path separator between the HomeDir and
  the relative path will be changed to a colon.
  In most cases, this looks like:
    /home/Experiment:raw/data/<run>
  In the case that <run> is an absolute path, the
  output if any will be preceded by a colon.
  
  -H HomeDir : cd into HomeDir before searching or
       loading Experiment.config
  -a : append a third field which is :yes or :no,
       depending on whether the corresponding
       directory $HomeDir/anal/<run> exists.
  -l : Identify the latest run
  -N n : With -l, identify the n most recent runs
  -t : Limit latest search to the specified type:
       one of data, cal, preflt, flight, junk

locate_rundir only looks for the run on the local
system. It is up to the caller to determine whether
to continue the search on a remote system.
EOF
exit 0
}

msgProgram='locate_rundir'
sep=:

#----------------------------------------------------------------
# Process command line options (-h, -a, -H HomeDir)
#----------------------------------------------------------------
optA=no
optL=no
optN=1
hasA=''
optt=''
while getopts "halt:N:H:" option; do
  case $option in
    h) print_usage;;
    H) HomeDir=$OPTARG;;
    a) optA=yes; hasA=${sep}no;;
    l) optL=yes;;
    N) optN=$OPTARG;;
    t) optt=$OPTARG;;
    \?) echo; exit 1;;
    *) msg -V -n $msgProgram "[ERROR] Unsupported option: -$option"; exit 1;;
  esac
done

if [ -n "$HomeDir" ]; then
  if [ -d "$HomeDir" ]; then
    cd "$HomeDir"
  else
    exit 0
  fi
fi

if [ $optL = yes ]; then
  if [ -n "$optt" ]; then
    case $optt in
      [Ff]*) RunType='raw/flight';;
      [Pp]*) RunType='raw/preflt';;
      [Cc]*) RunType='raw/cal';;
      [Jj]*) RunType='raw/junk';;
      *) RunType='raw/data';;
    esac
    runs=$(find $RunType -mindepth 1 -maxdepth 1 -type d 2>/dev/null | sed -e 's,^.*/,,' | sort -r | head -n$optN)
  else
    runs=$(find raw -mindepth 2 -maxdepth 2 -type d 2>/dev/null | sed -e 's,^.*/,,' | sort -r | head -n$optN)
  fi
else
  let sval=$OPTIND-1
  shift $sval
  runs=$*
fi

. /usr/local/libexec/load_exconfig.sh
[ -n "$CFG_ERROR" ] && msgf 3 $CFG_ERROR

[ -n "$runs" ] || msgf 3 "No runs specified"

function test_and_accept {
  mybase=$1
  mypath=$2
  myrun=$3
  
  RUNBASE=$(basename $myrun)
  if [ -d $mybase/$mypath/$RUNBASE ]; then
    [ $optA = yes -a -d $mybase/anal/$RUNBASE ] && hasA=${sep}yes
    echo $mybase$sep$mypath/$RUNBASE$hasA
    [ $RUNBASE = $myrun ] || [ $mypath/$RUNBASE = $myrun ] ||
      msgf 1 "Run $RUNBASE was found at $mypath, but request was for $myrun"
  fi
}

for RUN in $runs; do
  for base in $HomeDir $AltDir; do
    test_and_accept $base . $RUN
    for type in flight preflt cal data junk; do
      test_and_accept $base raw/$type $RUN
    done
  done
done
