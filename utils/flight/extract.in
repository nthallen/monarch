#! @SHELL_EXE@

function print_usage {
cat <<EOF
extract [-h] [-g <time>] [-z <time>] <directory> [prog ...]
 -r Don't recurse
 -g <time> specify start time (see "use rdr")
 -z <time> specify end time (see "use rdr")
 -F <no> specify the first data file number
 -L <no> specify the last data file number
 -d invoke gdb on each extraction
 -h print this message

 Run extraction programs on data in specified directory

 By default, extract expects to find extraction programs in
 the current directory. If a file named "VERSION" exists in
 the specified directory, its contents are used to locate
 additional directories which are added to the PATH.

 For example, given the command "extract 970503.1 fooext",
 suppose 970503.1/VERSION contains "1.1". extract will first
 look for fooext in the current directory if ./VERSION also
 contains "1.1" and if ./tm.dac is identical to 970503.1/tm.dac.
 Next extract will look in ./bin/1.1, again checking that
 the tm.dac file there is identical to 970503.1/tm.dac. Last,
 extract will look in 970503.1/../bin/1.1. In this case, that
 is the same as ./bin/1.1, but if a longer path were specified
 (to extract from an archive disk, for example) the extractions
 could be located there also.

 extract looks for an executable script named "extract" in 
 the specified directory and executes it. That script takes a 
 single argument, the source directory, and relies on the 
 environment variable $Extractions to pass extractions. 
 (extract will define $Extractions from its command-line 
 arguments if necessary). This directory-specific version of 
 extract may in turn call this version of extract with 
 impunity if it specifies the -r option.

 Environment variable RDR_OPTS may be used to pass options 
 directly to the rdr command line.

 Extract will perform the specified extractions in an empty
 directory. Any files created by the extractions in that
 directory will be moved into the analysis subdirectory 
 anal/$run where $run is the last component of the extraction 
 directory path. e.g. "extract //1/od1/home/abc/951127.1" 
 will place products in anal/951127.1 relative to the current 
 directory.

 If the environment variable EXTRACT_DIR is defined, the
 extractions will be run there and none of the resulting files
 will be moved. Otherwise a process-specified subdirectory will
 be created and then removed after the results have been
 moved to the analysis directory.

 Use of the ExtProducts environment variable is now obsolete.

 Values for the environment variables Extractions and RDR_OPTS
 which appear in Experiment.config 
 are ignored here, but will be used by the script "reduce" 
 when invoking extract. This allows custom extractions to 
 override values in Experiment.config gracefully.

 When using -d, if a .gdbinit file exists in the current
 directory, it will be passed to the gdb invocation(s).
EOF
exit 0
}

Ex_sav="$Extractions"
Prod_sav="$ExtProducts"
Ropt_sav="$RDR_OPTS"
[ -n "$SESSION" ] || SESSION=$$

# load_exconfig.sh guarantees that Experiment is defined
. /usr/local/libexec/load_exconfig.sh
msgProgram='extract'
[ -n "$CFG_ERROR" ] && msgf 3 "$CFG_ERROR"

#----------------------------------------------------------------
# Handle arguments
#----------------------------------------------------------------
time_opts=""
debug=""
while getopts "hdrg:z:F:L:S:" option; do
  case $option in
    h) print_usage;;
    r) EXTRACT_DEPTH=1;;
    g) time_opts="$time_opts -g $OPTARG";;
    z) time_opts="$time_opts -z $OPTARG";;
    F) time_opts="$time_opts -F $OPTARG";;
    L) time_opts="$time_opts -L $OPTARG";;
    d) debug=Debug;;
    \?) echo; exit 1;;
    *) echo Unsupported option: -$option; exit 1;;
  esac
done

# When debugging, we need to reinvoke extract under gnu screen,
# so we need to preserve the initial command line. We will
# eliminate the use of 'shift' and instead use indexing
sval=$OPTIND
dir=${!sval}
let sval=sval+1

[ -n "$dir" ] || print_usage

# Now let's locate the directory. Things to try:
# If absolute, need to stick with it. Otherwise:
#   $dir
#   raw/$dir
#   raw/<type>/$dir
fdir=`locate_rundir $dir`
[ -n "$fdir" ] || msgf 3 "Unable to locate directory '$dir'"
dir=${fdir%:*}/${fdir#*:}
[ -d "$dir" ] || msgf 4 "realpath done me wrong: $fdir => $dir"

#----------------------------------------------------------------
# Look for an extract script in the directory, but avoid 
# recursion.
#----------------------------------------------------------------
if [ -z "EXTRACT_DEPTH" -a -x $dir/extract ]; then
  #--------------------------------------------------------------
  # If we have args, build up Extractions
  #--------------------------------------------------------------
  export RDR_OPTS="$RDR_OPTS $time_opts"
  export EXTRACT_DEPTH=1
  if [ $# -gt 0 ]; then
    export Extractions=""
    for i in "$@"; do Extractions="$Extractions '$i'"; done
  fi
  exec $dir/extract $dir
fi

Extractions="$Ex_sav"
ExtProducts="$Prod_sav"
RDR_OPTS="$Ropt_sav"
unset Ex_sav Prod_sav Ropt_sav

[ $# -lt $sval ] && eval set -- $Extractions && sval=1

#----------------------------------------------------------------
# Now look for VERSION file and build a path for executables
#----------------------------------------------------------------
[ -f "$dir/VERSION" ] && VERSION=`cat $dir/VERSION`
[ -z "$VERSION" ] && VERSION="1.0"
[ -f "$dir/tm.dac" ] || msgf -1 "Unable to locate $dir/tm.dac"

function eval_dir {
  bin=$1
  if [ -d $bin ]; then
    bin=`realpath $bin`
    [ -f $bin/tm.dac ] || msgf -1 "Unable to locate $bin/tm.dac"
    cmp -s $dir/tm.dac $bin/tm.dac || msgf -1 "$bin/tm.dac differs but VERSIONs do not"
    MYPATH="$MYPATH$bin:"
  fi
}

# load_exconfig.sh updates PATH to include the current VERSION's
# bin directory, but this is not necessarily appropriate for
# extract, where we may be working on an older VERSION. So
# we will rebuild our PATH:
PATH=/bin:/usr/bin:/usr/local/bin
eval_dir bin/$VERSION
# Allow storage of binaries with raw data in archival storage
[ $dir/../bin/$VERSION -ef bin/$VERSION ] ||
  eval_dir $dir/../bin/$VERSION

[ -z "$MYPATH" ] &&
  msgf 3 "Unable to locate valid bin directory for version $VERSION"
PATH=$MYPATH${PATH#:}
# Similarly, TMBINDIR was set to the current VERSION
TMBINDIR=${MYPATH%%:*}

rv=''
hasext=''

for ((ii=sval; ii<=$#; ii++)); do
  i=${!ii}
  # I'll use a for loop to get the first element of $i. I break at
  # the end of the loop rather than loop, since later elements within
  # $i are arguments to the program, not another program.
  for j in $i; do
    wext=`which $j 2>/dev/null`
    [ -n "$wext" -a -x "$wext" ] || rv="$rv '$j'"
    hasext=yes
    break;
  done
done
[ -n "$rv" ] && msgf 3 "Unable to locate extraction(s):$rv"
[ -n "$hasext" ] || msgf 3 "No extractions specified"

if [ -n "$debug" -a -z "$STY" ]; then
  export SESSION
  screen $0 "$@"
  clear
  exit 0
fi

#----------------------------------------------------------------
# Create an empty directory in which to run the extractions
# This eliminates the use of ExtProducts and makes it easier
# to deal with non-standard extractions (i.e. ones that produce
# something other than .sps files). Any and all output into the
# current directory will be moved into the anal directory.
#
# If EXTRACT_DIR is defined, it is used and the results are not
# moved into the anal directory. Otherwise a process-specific
# directory is created and removed after the contents are moved.
#
# An extract script which requires two passes through extract
# could set up its own EXTRACT_DIR and then do the final moving
# itself.
#----------------------------------------------------------------
extdir=$EXTRACT_DIR
[ -z "$extdir" ] && extdir=anal/Ext.$SESSION
[ -d $extdir ] || mkdir -p $extdir
[ -d $extdir ] || msgf 3 "Unable to create directory $extdir"
rootdir=$PWD

cd $extdir
export TMLOGDIR=$dir
export TMBINPATH=$MYPATH
rv=0

clean_runfiles -k || msgf 3 "Unable to shutdown earlier operations"

Launch memo memo -S memosrvr:$SESSION -o extract.log -V || exit 1
memo_pid=`cat /var/run/monarch/$Experiment/memo.$SESSION.pid`
Launch tm_bfr bfr -S:$SESSION || exit 1

for ((ii=sval; ii<=$#; ii++)); do
  ext=${!ii}
  appname=ext
  for j in $ext; do
    appname=$j
    break;
  done
  Launch $debug -TMC- $ext -S:$SESSION -n "$appname" ||
    msgf 0 "ERROR: $ext failed to initialize"
done
[ -n "$debug" -a -n "$STY" ] && screen -X chdir $rootdir
msgf 0 "rdr -S:$SESSION $RDR_OPTS $time_opts -AqP $dir"
rdr -S:$SESSION $RDR_OPTS $time_opts -AqP $dir || rv=1
while kill -0 $memo_pid 2>/dev/null; do
  sleep 1
done
msgVdefault='-V'

cd $rootdir
[ $rv != 0 ] && msgf 3 "Partial result may be in $extdir"

if [ -z "$EXTRACT_DIR" ]; then
  analdir=`basename $dir`
  msgf 0 "Moving products to subdirectory anal/$analdir"
  [ -d anal/$analdir ] || mkdir -p anal/$analdir
  mv -v $extdir/* anal/$analdir
  rmdir $extdir
else
  msgf 0 "Results located in $extdir"
fi

msgf 0 "Extraction Complete"
if [ -n "$debug" -a -n "$STY" ]; then
  msgf 0 "Hit any key to exit screen"
  read j
fi
exit $rv
