#! /usr/bin/perl -w
use strict;
use Text::Wrap;
use POSIX;

# mksflow_gen <srcfile> name=<name>
# Generates the following:
#   <name>.tmc
#   <name>_col.tmc
#   <name>.cmd
#   # <name>_conv.tmc
#   <name>.genui

my $MKS_MAX_DRIVES = 5;
my $MKS_MAX_ADDRESS = 254;

my $srcfile = $ARGV[0] ||
  die "Must specify a source file\n";
my $name_cl = '';
my $Rate = '1';
my $Port = '/dev/ser1';
my $name_src = '';
my %Data;
my %Channel;
my @Index;
my $Punits = "Mps";
my $n_channels = 0;
my $have_digital = 0;
my $have_flows = 0;
my $have_p_ctrl = 0;
my $TX = '';
# my $have_analog = 0;
# my $have_non_unity_ai = 0;
# my %analog_units;
my $linenum = 0;
for (my $i = 1; $i < @ARGV; ++$i) {
# if (@ARGV > 1) {
  if ($ARGV[$i] =~ m/^name=([a-z][a-z0-9_]*)$/i ) {
    $name_cl = $1;
  } elsif ($ARGV[$i] =~ m/^TX=(\^?)$/i ) {
    if ($1) {
      $TX = '^';
    }
  } else {
    die "Invalid name specification: '$ARGV[$i]'\n";
  }
}

open(my $ifh, "<", $srcfile)
  or die "Cannot open < $srcfile\n";

while (my $line = <$ifh>) {
  ++$linenum;
  chomp $line;
  next if $line =~ m/^\s*(?:#.*)?$/; # comment
  if ( $line =~ m|^\s*Rate\s+(\d+(?:/\d+)?)\s+Hz\s*|i ) {
    $Rate = $1;
  } elsif ( $line =~ m/^\s*Port\s+(\S+)\s*$/i ) {
    $Port = $1;
  } elsif ( $line =~ m/^\s*Name\s+([a-z]\w*)\s*$/i ) {
    die "$srcfile:$linenum: Name redefined\n"
      if $name_src ne '';
    $name_src = $1;
    die "$srcfile:$linenum: Name $name_src conflicts with commandline name=$name_cl\n"
      if $name_cl ne '' && $name_src ne $name_cl;
  } elsif ( $line =~ m,^\s* Digital \s+ ([A-Za-z]\w+) \s+ (\d+) \s+
                        (MFC|MFM|VFC) \s+
                        ([0-9]+) \s+ (\w+(?:/\w+)?) \s+
                        ([0-9]+) \s+ (\w+(?:/\w+)?) \s+
                        ([0-9]+) \s+ (\w+)
                        (?: \s+ "([^"]*)" )?
                        \s* $,ix ) {
    my ($datum, $channel, $chtype, $vf_fullscale, $VFunits,
        $mf_fullscale,$MFunits, $p_fullscale, $Punits, $text) =
      ($1,$2,lc($3),$4,$5,$6,$7,$8,$9,$10);
    die "$srcfile:$linenum: Datum $datum conflicts with earlier definition\n"
      if $Data{$datum};
    die "$srcfile:$linenum: Channel $channel already assigned\n"
      if $Channel{$channel};
    die "$srcfile:$linenum: Channel $channel out of range\n"
      if $channel > $MKS_MAX_ADDRESS || $channel < 1;
    die "$srcfile:$linenum: Number of drives exceeds arbitrary limit of $MKS_MAX_DRIVES\n"
      if $n_channels >= $MKS_MAX_DRIVES;
    if ($chtype eq 'mfc' || $chtype eq 'vfc') {
      $text ||= $channel; # command defaults to channel mnemonic
    }
    my $VFprec = 4 - floor(log10($vf_fullscale));
    my $MFprec = 4 - floor(log10($mf_fullscale)),
    my $SPunits;
    my $SPprec;
    if ($chtype eq 'mfc') {
      $SPunits = $MFunits;
      $SPprec = $MFprec;
    } elsif ($chtype eq 'vfc') {
      $SPunits = $VFunits;
      $SPprec = $VFprec;
    }
    $Data{$datum} = {
      type => 'digital',
      index => $n_channels,
      channel => $channel,
      chtype => $chtype,
      VFunits => $VFunits,
      MFunits => $MFunits,
      SPunits => $SPunits,
      Punits => $Punits,
      VFprec => 4 - floor(log10($vf_fullscale)),
      MFprec => 4 - floor(log10($mf_fullscale)),
      SPprec => $SPprec,
      Pprec => 4 - floor(log10($p_fullscale)),
      text => $text};
    $Channel{$channel} = $datum;
    push(@Index, $datum);
    $have_digital = 1;
    ++$n_channels;
  } elsif ( $line =~ m,^\s* Digital \s+ ([A-Za-z]\w+) \s+ (\d+) \s+
                        (PC3?) \s+
                        ([0-9]+) \s+ (\w+)
                        (?: \s+ "([^"]*)" )?
                        \s* $,ix ) {
    my ($datum, $channel, $chtype, $p_fullscale, $Punits, $text) =
      ($1,$2,lc($3),$4,$5,$6);
    die "$srcfile:$linenum: Datum $datum conflicts with earlier definition\n"
      if $Data{$datum};
    die "$srcfile:$linenum: Channel $channel already assigned\n"
      if $Channel{$channel};
    die "$srcfile:$linenum: Channel $channel out of range\n"
      if $channel > $MKS_MAX_ADDRESS || $channel < 1;
    die "$srcfile:$linenum: Number of drives exceeds arbitrary limit of $MKS_MAX_DRIVES\n"
      if $n_channels >= $MKS_MAX_DRIVES;
    $text ||= $channel; # command defaults to channel mnemonic
    my $Pprec = 4 - floor(log10($p_fullscale));
    my $SPunits = $Punits;
    my $SPprec = $Pprec;
    $Data{$datum} = {
      type => 'digital',
      index => $n_channels,
      channel => $channel,
      chtype => $chtype,
      # VFunits => $VFunits,
      # MFunits => $MFunits,
      SPunits => $SPunits,
      Punits => $Punits,
      # VFprec => 4 - floor(log10($vf_fullscale)),
      # MFprec => 4 - floor(log10($mf_fullscale)),
      SPprec => $SPprec,
      Pprec => $Pprec,
      text => $text};
    $Channel{$channel} = $datum;
    push(@Index, $datum);
    $have_digital = 1;
    ++$n_channels;
  } else {
    die "$srcfile:$linenum: Syntax error: '$line'\n";
  }
}

close($ifh) or warn "Error closing srcfile '$srcfile'\n";

my $Name = $name_src || $name_cl || "Alicat";

open(my $tmc, ">", "$Name.tmc") ||
  die "$srcfile: Unable to write output file $Name.tmc\n";
my $col;
if ($have_digital) {
  open($col, ">", "${Name}_col.tmc") ||
    die "$srcfile: Unable to write output file ${Name}_col.tmc\n";
}
open(my $genui, ">", "${Name}.genui") ||
  die "$srcfile: Unable to write output file ${Name}.genui\n";
open(my $tbl, ">", "$Name.tbl") ||
  die "$srcfile: Unable to write output file $Name.tbl\n";
# open(my $conv, ">", "${Name}_conv.tmc") ||
  # die "$srcfile: Unable to write output file ${Name}_conv.tmc\n";
open(my $cmd, ">", "$Name.cmd") ||
  die "$srcfile: Unable to write output file $Name.cmd\n";
# Open the rest here also

my ($datadef, $coldef, @grpmem, $tbldef, $hktbldef, $cmddef,
    @status_genui, $tbldef2, $ptbldef, $ptbldef2, $phktbldef);

if ($have_digital) {
  $datadef = "TM $Rate Hz ${Name}_Stale_t ${Name}_Stale;\n";
  $coldef .= "  ${Name}_Stale = ${Name}_obj->Stale(255);\n";
  push(@grpmem, "${Name}_Stale");

print $tmc <<EOF
%{
  /* alicat driver interface */
  #define ALICAT_MAX_DRIVES $n_channels
  #include "alicat.h"
  #define ${Name}_drive(x,y) ${Name}[x].y
%}
TM typedef float ${Name}_Flow0_t { text "%7.0f"; }
TM typedef float ${Name}_Flow1_t { text "%7.1f"; }
TM typedef float ${Name}_Flow2_t { text "%7.2f"; }
TM typedef float ${Name}_Flow3_t { text "%7.3f"; }
TM typedef float ${Name}_Flow4_t { text "%7.4f"; }
TM typedef uint16_t ${Name}_Status_t { text "%04X"; }
TM typedef uint8_t ${Name}_Stale_t { text "%3u"; }
TM typedef float ${Name}_Temp_t { text "%7.2f"; }
TM typedef float ${Name}_Press_t { text "%7.2f"; }
EOF
;
}

if ($have_digital) {
  print $col
    "%{\n";
  if ($have_digital) {
    print $col
      "  #include \"alicat.h\"\n",
      "  alicat_tm_t ${Name}[$n_channels];\n";
  }
  print $col
    "%}\n";
}

for (my $i = 0; $i < $n_channels; ++$i) {
  my $offset = $i;
  my $datum = $Index[$i];
  my $D = $Data{$datum};
  my $VFprec = $D->{VFprec};
  my $MFprec = $D->{MFprec};
  my $Pprec = $D->{Pprec};
  my $VFunits = $D->{VFunits};
  my $MFunits = $D->{MFunits};
  my $Punits = $D->{Punits};
  my $SPprec = $D->{SPprec};
  my $SPunits = $D->{SPunits};
  my $has_flow_ctrl = 0;
  my $has_flows = 0;
  my $has_p_ctrl = 0;
  
  if ($D->{type} eq 'digital') {
    $has_flow_ctrl = $D->{chtype} eq 'mfc' || $D->{chtype} eq 'vfc';
    $has_flows = $has_flow_ctrl || $D->{chtype} eq 'mfm';
    $has_p_ctrl = $D->{chtype} =~ m/^pc/;
    $have_p_ctrl ||= $has_p_ctrl;
    if ($has_flow_ctrl || $has_p_ctrl) {
      $datadef .= "TM $Rate Hz ${Name}_Flow${SPprec}_t ${datum}_Set;\n";
      $coldef .= "  ${datum}_Set = ${Name}_drive($i,flow_setpoint);\n";
      push(@grpmem, "${datum}_Set");
    }
    if ($has_flows) {
      $have_flows = 1;
      $datadef .= "TM $Rate Hz ${Name}_Flow${VFprec}_t ${datum}_VolFlow;\n";
      $coldef .=  "  ${datum}_VolFlow = ${Name}_drive($i,volumetric_flow);\n";
      $datadef .= "TM $Rate Hz ${Name}_Flow${MFprec}_t ${datum}_MassFlow;\n";
      $coldef .=  "  ${datum}_MassFlow = ${Name}_drive($i,mass_flow);\n";
      $datadef .= "TM $Rate Hz ${Name}_Temp_t ${datum}_T;\n";
      $coldef .=  "  ${datum}_T = ${Name}_drive($i,flow_temp);\n";
      push(@grpmem, map "${datum}_$_", qw(VolFlow MassFlow T));
    }
    $datadef .= "TM $Rate Hz ${Name}_Flow${Pprec}_t ${datum}_P;\n";
    $coldef .=  "  ${datum}_P = ${Name}_drive($i,pressure);\n";
    $datadef .= "TM $Rate Hz ${Name}_Status_t ${datum}_Status;\n";
    $coldef .=  "  ${datum}_Status = ${Name}_drive($i,status);\n";
    $datadef .= "TM $Rate Hz ${Name}_Stale_t ${datum}_Stale;\n";
    $coldef .=  "  ${datum}_Stale = ${Name}_drive($i,stale);\n";
    push(@grpmem, map "${datum}_$_", qw(P Status Stale));

    print $genui
      "  $Rate ${datum}_Status ${Name}_HK Status %.0lf\n",
      "  $Rate ${datum}_Stale  ${Name}_HK Stale\n",
      "  $Rate ${datum}_P      ${Name}_HK ${Punits}\n";
    if ($has_flows) {
      print $genui
        "  $Rate ${datum}_T      ${Name}_HK T\n",
        "  $Rate ${datum}_MassFlow   $Name ${MFunits}\n",
        "  $Rate ${datum}_VolFlow   $Name ${VFunits}\n";
    }
    if ($has_flow_ctrl || $has_p_ctrl) {
      print $genui
        "  $Rate ${datum}_Set    $Name ${SPunits}\n";
    }
  } else {
    die "Unsupported type";
  }
  
  my $datumtbl;
  if ($has_flows) {
    my $setdisp = $has_flow_ctrl ? "(${datum}_Set,7)" :
                    '"          "';
    my $settype = ($D->{chtype} eq 'vfc') ? 'VolFlow' : 'MassFlow';
    my $flowunits = ($D->{chtype} eq 'vfc') ? $VFunits : $MFunits;
    $datumtbl =
      "  ${datum}: $setdisp (${datum}_${settype},7) $flowunits;\n";
    $tbldef .= $datumtbl;

    $datumtbl =
      "  ${datum}: $setdisp (${datum}_VolFlow,7)  (${datum}_MassFlow,7);\n";
    $tbldef2 .= $datumtbl;

    if ($D->{type} eq 'digital') {
      $datumtbl =
        "  ${datum}: (${datum}_T,7) C (${datum}_P,7) $Punits\n" .
          "(${datum}_Status,4) (${datum}_Stale,3);\n";
      $hktbldef .= $datumtbl;
    }

    print $tbl
      "${datum}_vfull {\n",
      (($D->{chtype} eq 'mfc' || $D->{chtype} eq 'vfc') ?
        "  Set:    (${datum}_Set,7)       $SPunits;\n" : ''),
        "  MFlow:  (${datum}_MassFlow,7)  $MFunits;\n",
        "  VFlow:  (${datum}_VolFlow,7)   $VFunits;\n";
    if ($D->{type} eq 'digital') {
      print $tbl
      "  T:      (${datum}_T,7)         C;\n",
      "  P:      (${datum}_P,7)         $Punits;\n",
      "  Status: (${datum}_Status,4);\n",
      "  Stale:  (${datum}_Stale,3);\n";
    }
    print $tbl
      "}\n\n";

    print $tbl
      "${datum}_vft {\n",
      "  HBox { +-; Title: ${datum}; -+ };\n",
      "  [${datum}_vfull];\n",
      "}\n\n";

    print $tbl
      "${datum}_vdata {\n",
      (($D->{chtype} eq 'mfc' || $D->{chtype} eq 'vfc') ?
        "  Set:    (${datum}_Set,7)       $SPunits;\n" : ''),
        "  MFlow:  (${datum}_MassFlow,7)  $MFunits;\n",
        "  VFlow:  (${datum}_VolFlow,7)   $VFunits;\n";
    if ($D->{type} eq 'digital') {
      print $tbl
      "  T:      (${datum}_T,7)         C;\n",
      "  P:      (${datum}_P,7)         $Punits;\n";
    }
    print $tbl
      "}\n\n";

    print $tbl
      "${datum}_vdt {\n",
      "  HBox { +-; Title: ${datum}; -+ };\n",
      "  [${datum}_vdata];\n",
      "}\n\n";

    if ($has_flow_ctrl) {
      my $text = $D->{text};
      my $channel = $D->{channel};
      if (!defined($text) || length($text) == 0) {
        $text = $datum;
      }
      my @text = split(' ', "$text Flow SetPoint");
      my $fword = scalar(@text)+1;
      if ($D->{type} eq 'digital') {
        $cmddef .=
          "  : " . join(' ', @text, '%f', "($SPunits)", $SPunits, '*') .
          " { ${Name}_set($channel, \$$fword); }\n";
      } else {
        die "Unsupported type";
      }
    }
  }
  if ($has_p_ctrl) {
    my $setdisp = "(${datum}_Set,7)";
    $datumtbl =
      "  ${datum}: $setdisp (${datum}_P,7) $Punits;\n";
    $ptbldef .= $datumtbl;

    $datumtbl =
      "  ${datum}: $setdisp (${datum}_P,7);\n";
    $ptbldef2 .= $datumtbl;

    $datumtbl =
      "  ${datum}: $setdisp (${datum}_P,7) $Punits\n" .
        "(${datum}_Status,4) (${datum}_Stale,3);\n";
    $phktbldef .= $datumtbl;

    print $tbl
      "${datum}_pvfull {\n",
      "  Set:    (${datum}_Set,7)       $SPunits;\n",
      "  P:      (${datum}_P,7)         $Punits;\n",
      "  Status: (${datum}_Status,4);\n",
      "  Stale:  (${datum}_Stale,3);\n",
      "}\n\n";

    print $tbl
      "${datum}_pvft {\n",
      "  HBox { +-; Title: ${datum}; -+ };\n",
      "  [${datum}_pvfull];\n",
      "}\n\n";

    print $tbl
      "${datum}_pvdata {\n",
      (($D->{chtype} eq 'mfc' || $D->{chtype} eq 'vfc') ?
        "  Set:    (${datum}_Set,7)       $SPunits;\n" : ''),
        "  P:      (${datum}_P,7)         $Punits;\n",
      "}\n\n";

    print $tbl
      "${datum}_pvdt {\n",
      "  HBox { +-; Title: ${datum}; -+ };\n",
      "  [${datum}_pvdata];\n",
      "}\n\n";
#   print $tbl "}\n";
  }
}

if ($have_digital) {
  print $tmc
    "\n$datadef" ,
    'TM "Receive" ' . "$Name 1;\n\n" ,

    wrap("","    ", "Group $Name (" . join(', ', @grpmem) . ") {\n") ,
    $coldef ,
    "  ${Name}_obj->synch();\n}\n";

  print $genui
    "  $Rate ${Name}_Stale ${Name}_HK Stale\n";
}

if ($have_flows) {
  print $tbl
    "${Name}_flows {\n" ,
    "  HBox { +-; Title: $Name; -+ };\n" ,
    '  ""    >Set<        >Flow<;' . "\n",
    $tbldef;
}

if ($have_digital && $have_flows) {
  print $tbl
    "  { HGlue 0+1 Stale: (${Name}_Stale,3) }\n",
    "}\n\n",
    "${Name}_hk {\n",
    "  HBox { +-; Title: \"$Name HK\"; -+ };\n" ,
    '  ""    >Temp<    "" >Pres< "" >Status< >Stale<;' . "\n",
    $hktbldef,
    "}\n\n";
# } else {
  # print $tbl "}\n\n";
}

if ($have_flows) {
  print $tbl
    "${Name}_flows2 {\n" ,
    "  HBox { +-; Title: $Name; -+ };\n" ,
    '  ""    >Set<        >ccm<             >nccm<;' . "\n",
    $tbldef2,
    "}\n";
}

if ($have_p_ctrl) {
  print $tbl
    "${Name}_Ps {\n" ,
    "  HBox { +-; Title: $Name; -+ };\n" ,
    '  ""    >Set<        >Pres<;' . "\n",
    $ptbldef,
    "  { HGlue 0+1 Stale: (${Name}_Stale,3) }\n",
    "}\n\n",
    "${Name}_Phk {\n",
      "  HBox { +-; Title: \"$Name P HK\"; -+ };\n" ,
      '  ""    "" >Pres< "" >Status< >Stale<;' . "\n",
      $phktbldef,
      "}\n\n";
#} else {
#  print $tbl "}\n\n";
}

print $cmd <<EOF
%INTERFACE <$Name>

%{
  #if defined(SERVER) && !defined(TRANSMITTING)
  void ${Name}_set(int ID, float setpoint) {
    uint32_t rawset = *(uint32_t*)&setpoint;
    // WII:FF:AAAA:NN:DD:DD...\n
    // II is the device ID
    // FF is the Modbus function code
    // AA is the register address
    // NN is the number of registers
    // DD are the register values
    // All values are in hex
    if_$Name.Turf("W%X:%X:%X:2:%X:%X\\n",
      ID, 16, 1009, ((rawset>>16) & 0xFFFF),
      (rawset & 0xFFFF));
  }
  #endif
%}

EOF
;

if ( $cmddef ) {
print $cmd <<EOF
&${TX}command
$cmddef  ;
EOF
;
}

close($tmc) || warn "$srcfile: Error closing output file $Name.tmc\n";
close($col) || warn "$srcfile: Error closing output file ${Name}_col.tmc\n";
close($genui) || warn "$srcfile: Error closing output file ${Name}.genui\n";
close($tbl) || warn "$srcfile: Error closing output file $Name.tbl\n";
# close($conv) || warn "$srcfile: Error closing output file ${Name}_conv.tmc\n";
close($cmd) || warn "$srcfile: Error closing output file $Name.cmd\n";
